"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listSchedules = exports.deleteSchdule = exports.createSchedules = void 0;
const client_scheduler_1 = require("@aws-sdk/client-scheduler");
const REGION = process.env.CDK_DEFAULT_REGION;
const client = new client_scheduler_1.SchedulerClient({ region: REGION });
const createSchedules = async (params) => {
    try {
        const command = new client_scheduler_1.CreateScheduleCommand(params);
        const data = await client.send(command);
        console.log("Success, target added; requestID: ", data);
        return data; // For unit tests.
    }
    catch (err) {
        console.log("Error", err);
        throw new Error("Error");
    }
};
exports.createSchedules = createSchedules;
const deleteSchdule = async (params) => {
    try {
        const command = new client_scheduler_1.DeleteScheduleCommand(params);
        const data = await client.send(command);
        console.log("Success, schedule deleted", data);
        return data; // For testing.
    }
    catch (err) {
        console.log("Error", err);
        throw new Error("Error");
    }
};
exports.deleteSchdule = deleteSchdule;
const listSchedules = async (params) => {
    try {
        const command = new client_scheduler_1.ListSchedulesCommand(params);
        const data = await client.send(command);
        console.log("Success, target added; requestID: ", data);
        return data; // For testing.
    }
    catch (err) {
        console.log("Error", err);
        throw new Error("Error");
    }
};
exports.listSchedules = listSchedules;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NoZWR1bGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdFQUE2UTtBQUM3USxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0FBQzlDLE1BQU0sTUFBTSxHQUFHLElBQUksa0NBQWUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBR2hELE1BQU0sZUFBZSxHQUFHLEtBQUssRUFBRSxNQUFrQyxFQUF3QyxFQUFFO0lBQ2hILElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLHdDQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDLENBQUMsa0JBQWtCO0tBQ2hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFCO0FBQ0gsQ0FBQyxDQUFDO0FBVlcsUUFBQSxlQUFlLG1CQVUxQjtBQUVLLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxNQUFrQyxFQUF3QyxFQUFFO0lBQzlHLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLHdDQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLENBQUMsZUFBZTtLQUM3QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMxQjtBQUNILENBQUMsQ0FBQztBQVZXLFFBQUEsYUFBYSxpQkFVeEI7QUFFSyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsTUFBaUMsRUFBZ0IsRUFBRTtJQUNyRixJQUFJO1FBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSx1Q0FBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxPQUFPLElBQUksQ0FBQyxDQUFDLGVBQWU7S0FDN0I7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDLENBQUM7QUFWVyxRQUFBLGFBQWEsaUJBVXhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlYXRlU2NoZWR1bGVDb21tYW5kLCBDcmVhdGVTY2hlZHVsZUNvbW1hbmRJbnB1dCwgQ3JlYXRlU2NoZWR1bGVDb21tYW5kT3V0cHV0LCBEZWxldGVTY2hlZHVsZUNvbW1hbmQsIERlbGV0ZVNjaGVkdWxlQ29tbWFuZElucHV0LCBEZWxldGVTY2hlZHVsZUNvbW1hbmRPdXRwdXQsIExpc3RTY2hlZHVsZXNDb21tYW5kLCBMaXN0U2NoZWR1bGVzQ29tbWFuZElucHV0LCBTY2hlZHVsZXJDbGllbnQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNjaGVkdWxlclwiO1xuY29uc3QgUkVHSU9OID0gcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OO1xuY29uc3QgY2xpZW50ID0gbmV3IFNjaGVkdWxlckNsaWVudCh7IHJlZ2lvbjogUkVHSU9OIH0pO1xuXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTY2hlZHVsZXMgPSBhc3luYyAocGFyYW1zOiBDcmVhdGVTY2hlZHVsZUNvbW1hbmRJbnB1dCk6IFByb21pc2U8Q3JlYXRlU2NoZWR1bGVDb21tYW5kT3V0cHV0PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBDcmVhdGVTY2hlZHVsZUNvbW1hbmQocGFyYW1zKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgY2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgY29uc29sZS5sb2coXCJTdWNjZXNzLCB0YXJnZXQgYWRkZWQ7IHJlcXVlc3RJRDogXCIsIGRhdGEpO1xuICAgIHJldHVybiBkYXRhOyAvLyBGb3IgdW5pdCB0ZXN0cy5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJFcnJvclwiLCBlcnIpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yXCIpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGVsZXRlU2NoZHVsZSA9IGFzeW5jIChwYXJhbXM6IERlbGV0ZVNjaGVkdWxlQ29tbWFuZElucHV0KTogUHJvbWlzZTxEZWxldGVTY2hlZHVsZUNvbW1hbmRPdXRwdXQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IERlbGV0ZVNjaGVkdWxlQ29tbWFuZChwYXJhbXMpO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3MsIHNjaGVkdWxlIGRlbGV0ZWRcIiwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7IC8vIEZvciB0ZXN0aW5nLlxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yXCIsIGVycik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3JcIik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBsaXN0U2NoZWR1bGVzID0gYXN5bmMgKHBhcmFtczogTGlzdFNjaGVkdWxlc0NvbW1hbmRJbnB1dCk6IFByb21pc2U8YW55PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0U2NoZWR1bGVzQ29tbWFuZChwYXJhbXMpO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3MsIHRhcmdldCBhZGRlZDsgcmVxdWVzdElEOiBcIiwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7IC8vIEZvciB0ZXN0aW5nLlxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yXCIsIGVycik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3JcIik7XG4gIH1cbn07Il19