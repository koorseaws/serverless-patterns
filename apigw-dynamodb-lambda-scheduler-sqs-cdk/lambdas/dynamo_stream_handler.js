"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const crypto_1 = require("crypto");
const scheduler_1 = require("./utils/scheduler");
const handler = async (event) => {
    console.log(`Event: ${JSON.stringify(event, null, 2)}`);
    const Separator = "-";
    for (const record of event.Records) {
        if (record.dynamodb && record.dynamodb.NewImage) {
            const newImage = (0, util_dynamodb_1.unmarshall)(record.dynamodb.NewImage);
            console.debug("New Image: %j", newImage);
            let messageData = {
                id: newImage["id"],
                eventName: newImage["eventName"],
                eventType: newImage["eventType"],
                scheduleTime: newImage["scheduleTime"]
            };
            let scheduleWindow = getScheduleWindowInISOStringWithoutMillisecs(messageData.scheduleTime);
            const clientToken = (0, crypto_1.randomUUID)();
            const targetType = messageData.eventType || "default";
            const inputJson = {
                ...messageData,
                "clientToken": clientToken
            };
            const queueTarget = {
                RoleArn: process.env.QUEUE_TARGET_ROLE_ARN,
                Arn: process.env.QUEUE_TARGET_ARN,
                RetryPolicy: {
                    MaximumEventAgeInSeconds: 60,
                    MaximumRetryAttempts: 3
                },
                Input: JSON.stringify(inputJson),
            };
            const lambdaTarget = {
                RoleArn: process.env.LAMBDA_TARGET_ROLE_ARN,
                Arn: process.env.LAMBDA_TARGET_ARN,
                RetryPolicy: {
                    MaximumEventAgeInSeconds: 60,
                    MaximumRetryAttempts: 3
                },
                Input: JSON.stringify(inputJson),
            };
            const schedulerInput = {
                Name: messageData.eventName + Separator + messageData.id,
                FlexibleTimeWindow: {
                    Mode: "OFF",
                },
                Target: (targetType === "Lambda") ? lambdaTarget : queueTarget,
                ScheduleExpression: `at(${scheduleWindow})`,
                GroupName: targetType,
                scheduleExpressionTimezone: 'America/Los_Angeles',
                ClientToken: clientToken,
            };
            const result = await (0, scheduler_1.createSchedules)(schedulerInput);
            if (result.$metadata.httpStatusCode == 200) {
                return {
                    statusCode: 200,
                    body: JSON.stringify({
                        statusMessage: result.$metadata,
                        message: 'Message Sent!',
                    }),
                };
            }
            else {
                return {
                    statusCode: result.$metadata.httpStatusCode || 400,
                    body: JSON.stringify({
                        statusMessage: result.$metadata,
                        statusCode: result.$metadata.httpStatusCode,
                    }),
                };
            }
        }
    }
};
exports.handler = handler;
function getScheduleWindowInISOStringWithoutMillisecs(epochTime) {
    let epochTimeInMiliSeconds = Number(epochTime) * 1000;
    const date = new Date(epochTimeInMiliSeconds);
    return date.toISOString().split('.')[0];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vX3N0cmVhbV9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1vX3N0cmVhbV9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLDBEQUFvRDtBQUVwRCxtQ0FBb0M7QUFFcEMsaURBQW9EO0FBRzdDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEwQixFQUFnQixFQUFFO0lBQ3hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztJQUV0QixLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDbEMsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQy9DLE1BQU0sUUFBUSxHQUFHLElBQUEsMEJBQVUsRUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUE2QyxDQUM5RCxDQUFDO1lBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekMsSUFBSSxXQUFXLEdBQWdCO2dCQUM3QixFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQztnQkFDbEIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUM7Z0JBQ2hDLFNBQVMsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDO2dCQUNoQyxZQUFZLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQzthQUN2QyxDQUFDO1lBRUYsSUFBSSxjQUFjLEdBQUcsNENBQTRDLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTVGLE1BQU0sV0FBVyxHQUFHLElBQUEsbUJBQVUsR0FBRSxDQUFDO1lBQ2pDLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDO1lBQ3RELE1BQU0sU0FBUyxHQUFHO2dCQUNoQixHQUFHLFdBQVc7Z0JBQ2QsYUFBYSxFQUFFLFdBQVc7YUFDM0IsQ0FBQTtZQUNELE1BQU0sV0FBVyxHQUFlO2dCQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBc0I7Z0JBQzNDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFpQjtnQkFDbEMsV0FBVyxFQUFFO29CQUNYLHdCQUF3QixFQUFFLEVBQUU7b0JBQzVCLG9CQUFvQixFQUFFLENBQUM7aUJBQ3hCO2dCQUNELEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQzthQUNqQyxDQUFDO1lBRUYsTUFBTSxZQUFZLEdBQWU7Z0JBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUF1QjtnQkFDNUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWtCO2dCQUNuQyxXQUFXLEVBQUU7b0JBQ1gsd0JBQXdCLEVBQUUsRUFBRTtvQkFDNUIsb0JBQW9CLEVBQUUsQ0FBQztpQkFDeEI7Z0JBQ0QsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO2FBQ2pDLENBQUM7WUFFRixNQUFNLGNBQWMsR0FBUTtnQkFDMUIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQyxFQUFFO2dCQUN4RCxrQkFBa0IsRUFBRTtvQkFDbEIsSUFBSSxFQUFFLEtBQUs7aUJBQ1o7Z0JBQ0QsTUFBTSxFQUFFLENBQUMsVUFBVSxLQUFHLFFBQVEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxZQUFZLENBQUEsQ0FBQyxDQUFBLFdBQVc7Z0JBQ3hELGtCQUFrQixFQUFFLE1BQU0sY0FBYyxHQUFHO2dCQUMzQyxTQUFTLEVBQUUsVUFBVTtnQkFDckIsMEJBQTBCLEVBQUUscUJBQXFCO2dCQUNqRCxXQUFXLEVBQUUsV0FBVzthQUN6QixDQUFDO1lBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDJCQUFlLEVBQUMsY0FBYyxDQUFDLENBQUM7WUFFckQsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsSUFBSSxHQUFHLEVBQUU7Z0JBQzFDLE9BQU87b0JBQ0wsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQ25CLGFBQWEsRUFBRSxNQUFNLENBQUMsU0FBUzt3QkFDL0IsT0FBTyxFQUFFLGVBQWU7cUJBQ3pCLENBQUM7aUJBQ0gsQ0FBQzthQUNIO2lCQUFNO2dCQUNMLE9BQU87b0JBQ0wsVUFBVSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxJQUFJLEdBQUc7b0JBQ2xELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO3dCQUNuQixhQUFhLEVBQUUsTUFBTSxDQUFDLFNBQVM7d0JBQy9CLFVBQVUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWM7cUJBQzVDLENBQUM7aUJBQ0gsQ0FBQzthQUNIO1NBQ0Y7S0FDRjtBQUNILENBQUMsQ0FBQztBQTdFVyxRQUFBLE9BQU8sV0E2RWxCO0FBRUYsU0FBUyw0Q0FBNEMsQ0FBQyxTQUFpQjtJQUNyRSxJQUFJLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM5QyxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEF0dHJpYnV0ZVZhbHVlXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcbmltcG9ydCAqIGFzIEFXUyBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNjaGVkdWxlclwiO1xuaW1wb3J0IHsgdW5tYXJzaGFsbCB9IGZyb20gXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBEeW5hbW9EQlN0cmVhbUV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IHsgbWVzc2FnZUJvZHkgfSBmcm9tICcuL3NjaGVtYXMvaW5wdXQtcmVxdWVzdC1zY2hlbWEnO1xuaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGVzIH0gZnJvbSBcIi4vdXRpbHMvc2NoZWR1bGVyXCI7XG5cblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IER5bmFtb0RCU3RyZWFtRXZlbnQpOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zb2xlLmxvZyhgRXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpfWApO1xuICBjb25zdCBTZXBhcmF0b3IgPSBcIi1cIjtcblxuICBmb3IgKGNvbnN0IHJlY29yZCBvZiBldmVudC5SZWNvcmRzKSB7XG4gICAgaWYgKHJlY29yZC5keW5hbW9kYiAmJiByZWNvcmQuZHluYW1vZGIuTmV3SW1hZ2UpIHtcbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gdW5tYXJzaGFsbChcbiAgICAgICAgcmVjb3JkLmR5bmFtb2RiLk5ld0ltYWdlIGFzIHsgW2tleTogc3RyaW5nXTogQXR0cmlidXRlVmFsdWUgfVxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJOZXcgSW1hZ2U6ICVqXCIsIG5ld0ltYWdlKTtcbiAgICAgIGxldCBtZXNzYWdlRGF0YTogbWVzc2FnZUJvZHkgPSB7XG4gICAgICAgIGlkOiBuZXdJbWFnZVtcImlkXCJdLFxuICAgICAgICBldmVudE5hbWU6IG5ld0ltYWdlW1wiZXZlbnROYW1lXCJdLFxuICAgICAgICBldmVudFR5cGU6IG5ld0ltYWdlW1wiZXZlbnRUeXBlXCJdLFxuICAgICAgICBzY2hlZHVsZVRpbWU6IG5ld0ltYWdlW1wic2NoZWR1bGVUaW1lXCJdXG4gICAgICB9O1xuXG4gICAgICBsZXQgc2NoZWR1bGVXaW5kb3cgPSBnZXRTY2hlZHVsZVdpbmRvd0luSVNPU3RyaW5nV2l0aG91dE1pbGxpc2VjcyhtZXNzYWdlRGF0YS5zY2hlZHVsZVRpbWUpO1xuXG4gICAgICBjb25zdCBjbGllbnRUb2tlbiA9IHJhbmRvbVVVSUQoKTtcbiAgICAgIGNvbnN0IHRhcmdldFR5cGUgPSBtZXNzYWdlRGF0YS5ldmVudFR5cGUgfHwgXCJkZWZhdWx0XCI7XG4gICAgICBjb25zdCBpbnB1dEpzb24gPSB7XG4gICAgICAgIC4uLm1lc3NhZ2VEYXRhLFxuICAgICAgICBcImNsaWVudFRva2VuXCI6IGNsaWVudFRva2VuXG4gICAgICB9XG4gICAgICBjb25zdCBxdWV1ZVRhcmdldDogQVdTLlRhcmdldCA9IHtcbiAgICAgICAgUm9sZUFybjogcHJvY2Vzcy5lbnYuUVVFVUVfVEFSR0VUX1JPTEVfQVJOISxcbiAgICAgICAgQXJuOiBwcm9jZXNzLmVudi5RVUVVRV9UQVJHRVRfQVJOISxcbiAgICAgICAgUmV0cnlQb2xpY3k6IHtcbiAgICAgICAgICBNYXhpbXVtRXZlbnRBZ2VJblNlY29uZHM6IDYwLFxuICAgICAgICAgIE1heGltdW1SZXRyeUF0dGVtcHRzOiAzXG4gICAgICAgIH0sXG4gICAgICAgIElucHV0OiBKU09OLnN0cmluZ2lmeShpbnB1dEpzb24pLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbGFtYmRhVGFyZ2V0OiBBV1MuVGFyZ2V0ID0ge1xuICAgICAgICBSb2xlQXJuOiBwcm9jZXNzLmVudi5MQU1CREFfVEFSR0VUX1JPTEVfQVJOISxcbiAgICAgICAgQXJuOiBwcm9jZXNzLmVudi5MQU1CREFfVEFSR0VUX0FSTiEsXG4gICAgICAgIFJldHJ5UG9saWN5OiB7XG4gICAgICAgICAgTWF4aW11bUV2ZW50QWdlSW5TZWNvbmRzOiA2MCxcbiAgICAgICAgICBNYXhpbXVtUmV0cnlBdHRlbXB0czogM1xuICAgICAgICB9LFxuICAgICAgICBJbnB1dDogSlNPTi5zdHJpbmdpZnkoaW5wdXRKc29uKSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjaGVkdWxlcklucHV0OiBhbnkgPSB7XG4gICAgICAgIE5hbWU6IG1lc3NhZ2VEYXRhLmV2ZW50TmFtZSArIFNlcGFyYXRvciArIG1lc3NhZ2VEYXRhLmlkLFxuICAgICAgICBGbGV4aWJsZVRpbWVXaW5kb3c6IHtcbiAgICAgICAgICBNb2RlOiBcIk9GRlwiLFxuICAgICAgICB9LFxuICAgICAgICBUYXJnZXQ6ICh0YXJnZXRUeXBlPT09XCJMYW1iZGFcIik/bGFtYmRhVGFyZ2V0OnF1ZXVlVGFyZ2V0LFxuICAgICAgICBTY2hlZHVsZUV4cHJlc3Npb246IGBhdCgke3NjaGVkdWxlV2luZG93fSlgLFxuICAgICAgICBHcm91cE5hbWU6IHRhcmdldFR5cGUsXG4gICAgICAgIHNjaGVkdWxlRXhwcmVzc2lvblRpbWV6b25lOiAnQW1lcmljYS9Mb3NfQW5nZWxlcycsIC8vT3B0aW9uYWxcbiAgICAgICAgQ2xpZW50VG9rZW46IGNsaWVudFRva2VuLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVNjaGVkdWxlcyhzY2hlZHVsZXJJbnB1dCk7XG5cbiAgICAgIGlmIChyZXN1bHQuJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdGF0dXNNZXNzYWdlOiByZXN1bHQuJG1ldGFkYXRhLFxuICAgICAgICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgU2VudCEnLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXNDb2RlOiByZXN1bHQuJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlIHx8IDQwMCxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdGF0dXNNZXNzYWdlOiByZXN1bHQuJG1ldGFkYXRhLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LiRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFNjaGVkdWxlV2luZG93SW5JU09TdHJpbmdXaXRob3V0TWlsbGlzZWNzKGVwb2NoVGltZTogc3RyaW5nKSB7XG4gIGxldCBlcG9jaFRpbWVJbk1pbGlTZWNvbmRzID0gTnVtYmVyKGVwb2NoVGltZSkgKiAxMDAwO1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoZXBvY2hUaW1lSW5NaWxpU2Vjb25kcyk7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXVxufVxuIl19